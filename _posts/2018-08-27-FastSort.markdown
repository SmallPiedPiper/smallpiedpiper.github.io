---
layout: post
title:  "快速进行排序"
date:   2018.08.27
image: /assets/images/twoscreen.jpg
---
分类标签：java 排序

**快速进行排序算法解析**

    快速排序是对冒泡排序的一种改进，设要排序的数组是A[0]……A[N-1]  
	首先任意选取一个数据（通常选用数组的第一个数）作为关键数据  
    然后将所有比它小的数都放到它前面，  所有比它大的数都放到它后面  
    这个过程称为一趟快速排序。  值得注意的是，快速排序不是一种稳定的排序算法  
    也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。    
	**算法复杂度:**  
	* 最好:(nlog2 n)        
	* 最坏:O(n*n)  
	* 平均情况:O(nlog2 n)  
	* 空间复杂度:O(nlog2 n)  
	**是一种不稳定的排序方法**  

***

```
package com.zyd.test;

import java.util.Random;

//快速排序的在进行理解
/*
 * 第一步快速排序要达到的目的就是形成基位两边，一边比基位大，一边比基位小
 * 第二步就是 两边再次进行快速排序，在两边的基础之上再次形成 第一步的局面
 * 第三步依次运行递归，然后进行循环调用，最后彻底完成排序的话，是左边界，大于右边界。
 * */
public class FastSort {

	public static void main(String[] args) {
		
		int[] a=generaticArray(10,100);
		for(int b:a){
			System.out.print(b+" ");
		}
		System.out.println("  ");
		sort(a,0,a.length-1);
		for(int b:a){
			System.out.print(b+" ");
		}
	}
	
	static int []  generaticArray( int length,int max){
		 int[] target=new int[length];
		 Random  ra=new Random();
		 for(int i=0;i<length;i++)
		 {
			 target[i]=ra.nextInt(max);
		 }
		 
		return target ;
		 
	 }
	
	static  void  sort(int [] array,int left,int right)
	{
		//第一步应该是选取一个基位，一般默认的是左边第一个，也就是数组的第一个数字
		
		if(left>right)
		{
			//此次代表此次排序彻底结束
			return ;
		}
		int i=left;
		int j=right;
		int temp=array[left];//选取数组第一个为基位
		while(i!=j)
		{
			//两次遍历的顺序不能颠倒
			while(i<j && array[j]>=temp)
			{
				j--;
			}
			
			while(i<j && array[i]<=temp)
			{
				i++;
			}
			
			
			
			if(i<j){
				//如果两个还是没有进行碰面，就交换这两个值的位置。此次交换的目的就是，为了达成一边比基位大，一边比基位小，但是此时基位还是在数组第一位
			exchange(array, j, i);
			}
		}
		//此时经过循环以后i==j，当下标彻底相等的时候，将基位和和i交换，此时才是真正达成一边比基位大，一边比基位小
		exchange(array, left, i);
		//对左边递归
		sort(array, left, i-1);
		//对右边递归
		sort(array, j+1, right);
		return ;
		
	}
	static void  exchange(int array[],int j, int i){
		int test;
		test=array[i];
		array[i]=array[j];
		array[j]=test;
	}
}

```





